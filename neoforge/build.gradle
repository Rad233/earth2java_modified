plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.neoforged:forge:${rootProject.minecraft_version}-${rootProject.neo_version}"
    //forge "net.minecraftforge:forge:${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modImplementation("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}")
}

processResources {
    inputs.property "modVersion", rootProject.mod_version
    inputs.property "modName", rootProject.mod_name
    inputs.property "modDescription", rootProject.mod_description
    inputs.property "modAuthor", rootProject.mod_author

    filesMatching("META-INF/mods.toml") {
        expand "modVersion": rootProject.mod_version,
                "modName": rootProject.mod_name,
                "modDescription": rootProject.mod_description,
                "modAuthor": rootProject.mod_author
    }
}

allprojects {
    archivesBaseName = "earth2java-forge"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        mixinConfig "earthtojava-common.mixins.json"
    }
}


shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

repositories {
    maven { url "https://maven.neoforged.net/releases" }
}